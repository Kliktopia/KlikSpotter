using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using KlikSpotter.Logging;

namespace KlikSpotter;

internal partial class FileAnalyzerService
{
    static FileAnalyzerService()
    {
        _directorySeparators = ['/', '\\'];
        _magicWordBuffer = new byte[MAGIC_WORD_LENGTH];

        _illegalCharacters =
        [
            '\x00',
            '\x01',
            '\x02',
            '\x03',
            '\x04',
            '\x05',
            '\x06',
            '\x07',
            '\x08',
            '\x09',
            '\x0a',
            '\x0b',
            '\x0c',
            '\x0d',
            '\x0e',
            '\x0f',
            '\x10',
            '\x11',
            '\x12',
            '\x13',
            '\x14',
            '\x15',
            '\x16',
            '\x17',
            '\x18',
            '\x19',
            '\x1a',
            '\x1b',
            '\x1c',
            '\x1d',
            '\x1e',
            '\x1f',
            '"',
            '*',
            '/',
            ':',
            '<',
            '>',
            '?',
            '\\',
            '|'
        ];

        _archiveExtensions =
        [
            ".exe",
            ".7z",
            ".zip",
            ".rar",
            ".001",
            ".cab",
            ".iso",
            ".xz",
            ".txz",
            ".lzma",
            ".tar",
            ".cpio",
            ".bz2",
            ".bzip2",
            ".tbz2",
            ".tbz",
            ".gz",
            ".gzip",
            ".tgz",
            ".tpz",
            ".z",
            ".taz",
            ".lzh",
            ".lha",
            ".rpm",
            ".deb",
            ".arj",
            ".vhd",
            ".wim",
            ".swm",
            ".fat",
            ".ntfs",
            ".dmg",
            ".xar",
            ".squashfs"
        ];

        _filesToLookFor =
        [
            "cncs32.dll",
            "cncs232.dll",
            "mmfs2.dll",
            "knpres.dll",
            "cncs.dll",
            "CNCS216.DLL",
            "knps.dll",
            "knpg.dll",
            "modfx.dll",
            "cctrans.dll",
            "rubberovine.dll"
        ];

        _filesToRemove =
        [
            "cncs32.dll",
            "cncs232.dll",
            "mmfs2.dll",
            "knpres.dll",
            "cncs.dll",
            "CNCS216.DLL",
            "knps.dll",
            "knpg.dll",
            "uninst32.exe",
            "uninst32.bin",
            "uninstal.exe",
            "uninstal.bin",
            "uninstall.exe",
            "uninstall.bin"
        ];

        _installMakerPattern =
        [
            0x77,
            0x77,
            0x67,
            0x54,
            0x29,
            0x48
        ];

        var searchPatterns = new Dictionary<string, byte[]>();

        AddRangeToDictionary(searchPatterns,
        [
            ("CNC MAIN CLASS", Encoding.ASCII.GetBytes("CncMainClass")),
            ("CNC EDIT CLASS", Encoding.ASCII.GetBytes("CncEditClass")),
            ("CC2 MAIN CLASS", Encoding.ASCII.GetBytes("Cc2MainClass")),
            ("CC2 EDIT CLASS", Encoding.ASCII.GetBytes("Cc2EditClass")),
            ("TGF_STIRNG", Encoding.ASCII.GetBytes("GFactory")),
            ("CNC_STRING", Encoding.ASCII.GetBytes("Click & Create")),
            ("KNP_STRING", Encoding.ASCII.GetBytes("Klik & Play")),
            ("MMFX_STRING", Encoding.ASCII.GetBytes("Multimedia Fusion Express"))
        ], value => value);

        AddRangeToDictionary(searchPatterns, new (string, byte[])[]
        {
            (
                "MAGIC",
                [
                    0xc0, 0x00, 0xc8, 0x90, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                    0x06, 0x00, 0x0f, 0x00, 0x98, 0x00, 0x16, 0x00, 0x00, 0x00,
                    0x00, 0x00
                ]
            ),
            (
                "MAGIC_ALT",
                [
                    0xc0, 0x08, 0xc8, 0x90, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                    0x06, 0x00, 0x0f, 0x00, 0x98, 0x00, 0x16, 0x00, 0x00, 0x00,
                    0x00, 0x00
                ]
            ),
            (
                "KNP_ICON",
                [
                    0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
                    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
                    0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0,
                    0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00,
                    0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00,
                    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00,
                    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xcc, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x40, 0xb0, 0x00,
                    0x00, 0x0c, 0xcc, 0x66, 0x6c, 0x40, 0xb0, 0x00, 0x00, 0xcc,
                    0xc6, 0x6c, 0xcc, 0x40, 0xb0, 0x00, 0x04, 0xcc, 0x6c, 0xc4,
                    0x44, 0x40, 0xb6, 0x00, 0x04, 0xc6, 0x6c, 0x4b, 0xbb, 0x00,
                    0xbb, 0xb0, 0x0c, 0xc6, 0xcc, 0x0b, 0x0b, 0x0c, 0xcc, 0xcc,
                    0x0c, 0xc6, 0xcc, 0x4b, 0xb4, 0x0c, 0x66, 0xcc, 0x04, 0x46,
                    0x44, 0xcb, 0x0b, 0xc6, 0x66, 0xcc, 0x04, 0xb0, 0x4b, 0x0b,
                    0x0b, 0xc6, 0xf6, 0xc4, 0x04, 0xb0, 0xb0, 0xcc, 0x0c, 0x66,
                    0x6c, 0xc4, 0x00, 0xbb, 0x0c, 0xc6, 0x66, 0x6f, 0x6c, 0xc0,
                    0x00, 0xbb, 0x0c, 0x6f, 0xff, 0x6c, 0xcc, 0x00, 0x00, 0x00,
                    0xb0, 0x66, 0x6c, 0xcc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x4c,
                    0xcc, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00,
                    0x80, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01,
                    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
                    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
                    0xc0, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xf0, 0x07,
                    0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00
                ]
            ),
            (
                "TGF_ICON",
                [
                    0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
                    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
                    0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0,
                    0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00,
                    0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00,
                    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00,
                    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xe0,
                    0x00, 0x40, 0x00, 0x40, 0x4e, 0xc4, 0xee, 0xec, 0x40, 0x40,
                    0x04, 0xc4, 0xef, 0xff, 0xff, 0xfe, 0xee, 0x00, 0x4e, 0xce,
                    0xf4, 0x44, 0x6f, 0xff, 0xfe, 0x40, 0xc4, 0xef, 0xfc, 0xcc,
                    0x4f, 0xff, 0xff, 0xec, 0x4e, 0xff, 0xf4, 0x44, 0x4c, 0x4f,
                    0xff, 0xee, 0x0c, 0xff, 0xc4, 0xc4, 0x4c, 0x4f, 0xff, 0xfc,
                    0x0e, 0xff, 0xc4, 0xfc, 0x4c, 0x4f, 0xff, 0xfe, 0x0e, 0xff,
                    0xc4, 0xfc, 0x4c, 0x46, 0x6f, 0xfe, 0x0e, 0xff, 0xc4, 0x6c,
                    0x4c, 0x44, 0x6f, 0xfc, 0x4e, 0xff, 0xf4, 0x44, 0xfc, 0x4f,
                    0xff, 0xec, 0x4e, 0xef, 0xff, 0xff, 0xfc, 0x46, 0x6f, 0xe4,
                    0x4c, 0xef, 0xff, 0xff, 0xff, 0x44, 0x6e, 0x40, 0x0e, 0xee,
                    0xff, 0xff, 0xff, 0xff, 0xee, 0x00, 0x00, 0x40, 0xee, 0xff,
                    0xff, 0xee, 0xe0, 0xc0, 0x00, 0x00, 0x04, 0x00, 0x00, 0xc0,
                    0x00, 0x40, 0xe0, 0x11, 0x00, 0x00, 0x90, 0x04, 0x00, 0x00,
                    0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xd0, 0x01,
                    0x00, 0x00, 0xfb, 0xcd, 0x00, 0x00
                ]
            ),
            (
                "CNC_ICON",
                [
                    0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
                    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
                    0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0,
                    0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00,
                    0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00,
                    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00,
                    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xe0,
                    0x00, 0x40, 0x00, 0x40, 0x4e, 0xc4, 0xee, 0xec, 0x40, 0x40,
                    0x04, 0xc4, 0xef, 0xff, 0xff, 0xfe, 0xee, 0x00, 0x4e, 0xce,
                    0xf4, 0x44, 0x6f, 0xff, 0xfe, 0x40, 0xc4, 0xef, 0xfc, 0xcc,
                    0x4f, 0xff, 0xff, 0xec, 0x4e, 0xff, 0xf4, 0x44, 0x4c, 0x4f,
                    0xff, 0xee, 0x0c, 0xff, 0xc4, 0xc4, 0x4c, 0x4f, 0xff, 0xfc,
                    0x0e, 0xff, 0xc4, 0xfc, 0x4c, 0x4f, 0xff, 0xfe, 0x0e, 0xff,
                    0xc4, 0xfc, 0x4c, 0x46, 0x6f, 0xfe, 0x0e, 0xff, 0xc4, 0x6c,
                    0x4c, 0x44, 0x6f, 0xfc, 0x4e, 0xff, 0xf4, 0x44, 0xfc, 0x4f,
                    0xff, 0xec, 0x4e, 0xef, 0xff, 0xff, 0xfc, 0x46, 0x6f, 0xe4,
                    0x4c, 0xef, 0xff, 0xff, 0xff, 0x44, 0x6e, 0x40, 0x0e, 0xee,
                    0xff, 0xff, 0xff, 0xff, 0xee, 0x00, 0x00, 0x40, 0xee, 0xff,
                    0xff, 0xee, 0xe0, 0xc0, 0x00, 0x00, 0x04, 0x00, 0x00, 0xc0,
                    0x00, 0x40, 0xe0, 0x11, 0x00, 0x00, 0x90, 0x04, 0x00, 0x00,
                    0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xd0, 0x01,
                    0x00, 0x00, 0xfb, 0xcd, 0x00, 0x00
                ]
            ),
            (
                "MMF15_ICON",
                [
                    0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
                    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
                    0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0,
                    0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00,
                    0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00,
                    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00,
                    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x40,
                    0x44, 0x44, 0x00, 0x06, 0xe1, 0x11, 0x1e, 0xe4, 0x60, 0x04,
                    0x00, 0x6e, 0x89, 0x99, 0x17, 0x4e, 0xe6, 0x48, 0x06, 0xe7,
                    0xf9, 0x99, 0x14, 0xff, 0xfe, 0xe4, 0x6e, 0x7f, 0xf9, 0x99,
                    0x47, 0xff, 0xfe, 0xe6, 0xee, 0xf7, 0xf9, 0x94, 0x11, 0x11,
                    0x1f, 0xe6, 0xee, 0xff, 0xf9, 0x49, 0x99, 0x99, 0x17, 0xe6,
                    0xe7, 0x7f, 0xf4, 0x99, 0x99, 0x99, 0x1f, 0xf6, 0xee, 0xff,
                    0xf9, 0x99, 0x99, 0x99, 0x17, 0xe6, 0xee, 0x7f, 0x49, 0x99,
                    0x1f, 0xff, 0xff, 0xe6, 0xee, 0x74, 0xf9, 0x99, 0x91, 0x11,
                    0x17, 0xe6, 0x6e, 0x4f, 0xf9, 0x99, 0x99, 0x99, 0x17, 0xe0,
                    0x04, 0xe7, 0xff, 0x99, 0x99, 0x99, 0x1e, 0x60, 0x40, 0xee,
                    0xe7, 0xf9, 0x99, 0x99, 0x1e, 0x00, 0x40, 0x0e, 0xee, 0xee,
                    0x7e, 0xee, 0x60, 0x00, 0x44, 0x40, 0x06, 0xee, 0xe6, 0x60,
                    0x00, 0x00, 0xf8, 0x10, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00,
                    0xc0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    0x80, 0x01, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x60, 0x07,
                    0x00, 0x00, 0x18, 0x1f, 0x00, 0x00
                ]
            ),
            (
                "MMF20_ICON",
                [
                    0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
                    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
                    0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0,
                    0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00,
                    0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00,
                    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00,
                    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x10, 0x00, 0x00,
                    0x00, 0x00, 0x11, 0x99, 0x99, 0x91, 0x00, 0x00, 0x00, 0x01,
                    0x90, 0x01, 0x99, 0x99, 0x10, 0x00, 0x00, 0x19, 0x99, 0x0b,
                    0x19, 0x99, 0x91, 0x00, 0x01, 0x99, 0x99, 0x90, 0xb1, 0x99,
                    0x99, 0x10, 0x01, 0x99, 0x91, 0x00, 0xbb, 0x19, 0x99, 0x10,
                    0x01, 0x99, 0x99, 0x1b, 0xb1, 0x19, 0x99, 0x10, 0x01, 0x99,
                    0x90, 0x0b, 0x11, 0x99, 0x99, 0x10, 0x01, 0x99, 0x90, 0xbb,
                    0xb1, 0x99, 0x99, 0x10, 0x01, 0x99, 0x99, 0x0b, 0xb1, 0x99,
                    0x99, 0x10, 0x00, 0x19, 0x99, 0x90, 0x11, 0x19, 0x91, 0x00,
                    0x00, 0x01, 0x99, 0x99, 0x99, 0x99, 0x10, 0x00, 0x00, 0x00,
                    0x19, 0x99, 0x99, 0x91, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11,
                    0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00,
                    0xf0, 0x0f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xc0, 0x03,
                    0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                    0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01,
                    0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
                    0xe0, 0x07, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf8, 0x1f,
                    0x00, 0x00, 0xff, 0xff, 0x00, 0x00
                ]
            ),
            (
                "MMFEXPRESS_ICON",
                [
                    0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
                    0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
                    0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00,
                    0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0,
                    0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00,
                    0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00,
                    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00,
                    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x07, 0x78, 0x00, 0x87, 0x70, 0x00, 0x00, 0x07,
                    0x80, 0x44, 0x44, 0x00, 0x08, 0x70, 0x00, 0x74, 0x44, 0x44,
                    0x44, 0x44, 0x40, 0x07, 0x07, 0x44, 0x44, 0x44, 0x44, 0x44,
                    0x44, 0x00, 0x04, 0x44, 0x44, 0x40, 0x44, 0x44, 0x44, 0x40,
                    0x04, 0x44, 0x44, 0x40, 0xf4, 0x44, 0x44, 0x40, 0x44, 0x44,
                    0x44, 0x40, 0xff, 0x44, 0x44, 0x44, 0x04, 0x44, 0x44, 0x40,
                    0xf7, 0x44, 0x44, 0x40, 0x04, 0x44, 0x44, 0x40, 0x74, 0x44,
                    0x44, 0x47, 0x00, 0x44, 0x44, 0x40, 0x44, 0x44, 0x44, 0x70,
                    0x00, 0x04, 0x44, 0x44, 0x44, 0x44, 0x40, 0x00, 0x00, 0x00,
                    0x00, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0xff, 0xff, 0x78, 0x44, 0xff, 0xff, 0x44, 0x44,
                    0xf8, 0x07, 0x44, 0x44, 0xe0, 0x01, 0x08, 0x70, 0xc0, 0x00,
                    0x44, 0x44, 0x80, 0x00, 0x44, 0x44, 0x80, 0x00, 0x44, 0x44,
                    0x80, 0x00, 0x00, 0x87, 0x00, 0x00, 0x44, 0x44, 0x80, 0x00,
                    0x48, 0x44, 0x80, 0x00, 0x44, 0x44, 0xc0, 0x01, 0x00, 0x08,
                    0xe0, 0x07, 0x44, 0x44, 0xfc, 0x3f, 0x40, 0x84, 0xff, 0xff,
                    0x44, 0x44, 0xff, 0xff, 0x40, 0x00
                ]
            )
        }, value => value);

        AddRangeToDictionary(searchPatterns,
        [
            "CNCRT32.EXE",
            "cncrt32.exe",
            "cncsa32.EXE",
            "CNCSA32.EXE",
            "MMFS2.dll",
            "mmfs2.dll",
            "MMFUSION",
            "CNCS232",
            "CNCSA.BIN",
            "cncsa.bin",
            "mmf2d3d8.dll",
            "mmf2d3d9.dll",
            "mmf2d3d11.dll"
        ], key => key, Encoding.ASCII.GetBytes);

        AddRangeToDictionary(searchPatterns,
        [
            "lnchrt.exe",
            "The Games Factory Application Runtime",
            "Multimedia Fusion Application Runtime",
            "<description>Application</description>",
            "1998 IMSI",
            "mmfs2.dll",
            "mmf2d3d11.dll",
            "mmf2d3d9.dll",
            "mmf2d3d8.dll",
            "Cannot create subdirectory in temporary directory !",
            "Invalid data in executable file !",
            "CNCRT32.EXE",
            "cncrt32.exe",
        ], key => $"{key} (UNICODE)", Encoding.Unicode.GetBytes);

        searchPatterns.Add("TEST1", Enumerable.Range(0, 256).Select(n => (byte)n).ToArray());
        searchPatterns.Add("TEST2", Enumerable.Range(32, 95).Select(n => (byte)n).ToArray());

        _searchPatterns = searchPatterns.AsReadOnly();
    }

    // The first 4 bytes of a file is the "Magic Word"
    static class MagicWords
    {
        public static readonly MagicWord[] MultiMediaFusion = ["MMF2", "CNC2", "MFU2"];
        public static readonly MagicWord[] Vitalize = ["PAME", "PAPP", "PAMU", "VTZ "];
        public static readonly MagicWord[] ClickAndCreate = ["GAME", "PAME", "GAMU", "PAMU", "CNC2"];
        public static readonly MagicWord[] TheGamesFactory = ["GAME", "PAME", "GAPP", "PAPP"];
    }

    [StructLayout(LayoutKind.Sequential, Size = MAGIC_WORD_LENGTH, CharSet = CharSet.Ansi)]
    private unsafe struct MagicWord
    {
        public fixed byte Bytes[MAGIC_WORD_LENGTH];

        public static implicit operator MagicWord(byte[] value) => new(value);

        public static implicit operator MagicWord(string value) => new(value);

        public bool Equals(ReadOnlySpan<byte> other)
        {
            if (other.Length < MAGIC_WORD_LENGTH)
                return false;

            for (int i = 0; i < MAGIC_WORD_LENGTH; i++)
            {
                if (Bytes[i] != other[i])
                    return false;
            }

            return true;
        }

        public override string ToString()
        {
            fixed (byte* ptr = Bytes)
                return Encoding.ASCII.GetString(ptr, MAGIC_WORD_LENGTH);
        }

        private MagicWord(ReadOnlySpan<byte> value)
        {
            if (value.Length < MAGIC_WORD_LENGTH)
                return;

            fixed (byte* ptr = Bytes)
                value.CopyTo(new Span<byte>(ptr, MAGIC_WORD_LENGTH));
        }

        private MagicWord(string value)
            : this(Encoding.ASCII.GetBytes(value, 0, value.Length >= MAGIC_WORD_LENGTH ? MAGIC_WORD_LENGTH : value.Length))
        {
        }
    }

    private static void AddRangeToDictionary<TKey, TInValue, TOutValue>(in Dictionary<TKey, TOutValue> dictionary, IEnumerable<(TKey, TInValue)> values, Func<TInValue, TOutValue> valueConverter) where TKey : notnull
    {
        foreach ((TKey key, TInValue value) in values)
            dictionary.Add(key, valueConverter(value));
    }

    private static void AddRangeToDictionary<TKey, TValue>(in Dictionary<TKey, TValue> dictionary, IEnumerable<TKey> keys, Func<TKey, TKey> keyConverter, Func<TKey, TValue> valueConverter) where TKey : notnull
    {
        foreach (var key in keys)
            dictionary.Add(keyConverter(key), valueConverter(key));
    }

    private bool IsFileTypeToLookFor(string filePath)
        => _archiveExtensions.Any(ext => filePath.EndsWith(ext, StringComparison.OrdinalIgnoreCase))
        && !filePath.Equals(_parameters.ProcessPath, StringComparison.OrdinalIgnoreCase);

    private static (AppParameters Parameters, ILogger Logger) GetProviders(AppParameters parameters)
    {
        var loggerFactory = LoggerFactory.Create(configure =>
        {
            if (!parameters.DoSilently)
            {
                configure.AddConsoleFormatter<CustomConsoleLoggerFormatter, ConsoleFormatterOptions>(configure =>
                {
                    configure.IncludeScopes = false;
                });

                configure.AddConsole(configure =>
                {
                    configure.FormatterName = nameof(CustomConsoleLoggerFormatter);
                });
            }

            if (parameters.DoFileLogging)
            {
                var fileLoggerProvider = new CustomFileLoggerProvider();
                configure.AddProvider(fileLoggerProvider);
            }
        });

        var logger = loggerFactory.CreateLogger<FileAnalyzerService>();
        return (parameters, logger);
    }

    private static IEnumerable<(string, AnsiConsoleColor?)> GetLogo(FileVersionInfo versionInfo)
    {
        yield return (@" _  ___ _ _     _____             _   _" + '\n', new(0xe8, 0x14, 0x16));
        yield return (@"| |/ / (_) |   / ____|           | | | |" + '\n', new(0xe8, 0x14, 0x16));
        yield return (@"| ' /| |_| | _| (___  _ __   ___ | |_| |_ ___ _ __" + '\n', new(0xff, 0xa5, 0x00));
        yield return (@"|  < | | | |/ /\___ \| '_ \ / _ \| __| __/ _ \ '__|" + '\n', new(0xfa, 0xeb, 0x36));
        yield return (@"| . \| | |   < ____) | |_) | (_) | |_| ||  __/ |" + '\n', new(0x79, 0xc3, 0x14));
        yield return (@"|_|\_\_|_|_|\_\_____/| .__/ \___/ \__|\__\___|_|" + '\n', new(0x48, 0x7d, 0xe7));
        yield return (@"                     | |" + '\n', new(0x4b, 0x36, 0x9d));
        yield return (@"                     |_|  ", new(0x70, 0x36, 0x9d));
        yield return (GetVersionString(versionInfo), null);
        yield return ("\n", null);
        yield return ("By Rikard Bengtsson (", null);
        yield return ("yxkalle", AnsiConsoleColor.DarkYellow);
        yield return (")\n", null);

        static string GetVersionString(FileVersionInfo versionInfo)
        {
            string version = $"{versionInfo.FileMajorPart}.{versionInfo.FileMinorPart}";
            if (versionInfo.FileBuildPart > 0 || versionInfo.FilePrivatePart > 0) version += $".{versionInfo.FileBuildPart}";
            if (versionInfo.FilePrivatePart > 0) version += $".{versionInfo.FilePrivatePart}";

            return $"VERSION {version}\n";
        }
    }
}
